# A sample data definition for a fictional wine cellar management application
# The basic model is:
#    bottle - canonical form of a wine bottle description
#    user - a user of the system
#    cellar - a collection of bottles
#    tasting_note - one user's perceptions of a bottle (which may or may not be in the user's cellar)
storage :mysql

a('user') {
  has :user_id => counter(1),
      :screen_name => combination(
                         one_of(["Wine","oeno","eno","Vino"]),
                         one_of(["Lover","Taster","phile"]),
                         counter(1))
  is_stored_in "users"
}

users = user * 1000

a('bottle') {
  has :bottle_id => counter(1),
      :producer => subset(
                     read_from_file('wine_cellar_winery_firsts.txt') {|text| text + " "},
                     read_from_file('wine_cellar_winery_seconds.txt') {|text| text + " "},
                     read_from_file('wine_cellar_winery_thirds.txt') {|text| text + " "}) {|result| result.strip},
      :vintage => one_of([1960,1970,1980,1990,2000],[0.05,0.05,0.2,0.4,0.3]) {|result| result + rand(9)}, # different vintages have different likelihoods, so use that accordingly
      :grapes => subset(read_from_file('wine_cellar_grapes.txt') {|text| text + ","},
                        read_from_file('wine_cellar_grapes.txt') {|text| text + ","},
                        read_from_file('wine_cellar_grapes.txt') {|text| text + ","},
                        read_from_file('wine_cellar_grapes.txt') {|text| text + ","}) {|all_grapes| all_grapes[0...all_grapes.length]},
      :country => one_of(['France','Germany','Italy','Austria','United States'])
                     
  is_stored_in 'bottles'
}

a('cellar') {
  has :cellar_id => counter(1),
      :user_id => 1 # this will be set later
  is_stored_in "cellars"
}

a('bottleCellar') {
  has :cellar_id => 1, # this is set later
      :bottle_id => 1,  # set later
      :amount => one_of([1,5,12,24],[0.3,0.3,0.3,0.1]) {|count| count + rand(4)} # assume that people generally have around one or five instances of a bottle, less often a case
  is_stored_in 'bottle_cellar'
}

bottles = bottle * 100

# give each user a cellar
cellars = collection_of cellar

foreach user do |cur_user|
  user_cellar = cellar.make
  user_cellar.user_id = cur_user.user_id
  cellars << user_cellar
end

# now give each cellar some number of bottles
bottleCellars = collection_of bottleCellar

foreach cellar do |cur_cellar|
  # a cellar might have 10, 20, or 40 different bottles, with some flux
  count = random_item_with_histogram([10,20,40],[0.2,0.6,0.2])
  count = count + rand(10)
  
  (1..count).each do |amount|
    cur_bottle = bottles.choice
    
    cur_bottle_cellar = bottleCellar.make
    cur_bottle_cellar.bottle_id = cur_bottle.bottle_id
    cur_bottle_cellar.cellar_id = cur_cellar.cellar_id
    
    bottleCellars << cur_bottle_cellar
  end
end



finish users
finish bottles
finish cellars
finish bottleCellars